module skyfall (
    input clk,  // clock
    input rst,  // reset
    input button_L, // input from user
    input button_R, // input from user
    input button_start, // input from user, start or reset button depends on state
    output ledmatrix[8][16], // output to led matrix [row][column]
    output score[7]  // 7-bit binary representation of number to display on seven seg
    
  ) {
  alu alu;
  .clk(clk),.rst(rst){
    dff clock[30];
    dff period;
    dff scorecounter[7];
    dff correctness[16];
    dff result;
    dff template[16];
    dff firstrow[16];
    dff playerrow[16];
    dff lastrow[16];
    dff middlecolumns[16][5]; //[row][column] 16 registers of 6 bits each
    fsm gamestate = {START,PLAYING,GAMEOVER};
    fsm aluops = {SHR15,SHR14,SHR13,SHR12,
                  SHR11,SHR10,SHR9,SHR8,
                  SHR7,SHR6,SHR5,SHR4,
                  SHR3,SHR2,SHR1,SHR0};
  }
  
  

  always {
    //MAPPING
    //mapping score to be displayed on seven seg subsequently
    score = scorecounter.q;    
    //mapping rows and colums registers to their corresponding LED index
    ledmatrix[0] = firstrow.q;
    ledmatrix[6] = lastrow.q;
    ledmatrix[7] = playerrow.q;    
    ledmatrix[1] = c{middlecolumns.q[0][4],middlecolumns.q[1][4],middlecolumns.q[2][4],middlecolumns.q[3][4],middlecolumns.q[4][4],middlecolumns.q[5][4],middlecolumns.q[6][4],middlecolumns.q[7][4],middlecolumns.q[8][4],middlecolumns.q[9][4],middlecolumns.q[10][4],middlecolumns.q[11][4],middlecolumns.q[12][4],middlecolumns.q[13][4],middlecolumns.q[14][4],middlecolumns.q[15][4]};
    ledmatrix[2] = c{middlecolumns.q[0][3],middlecolumns.q[1][3],middlecolumns.q[2][3],middlecolumns.q[3][3],middlecolumns.q[4][3],middlecolumns.q[5][3],middlecolumns.q[6][3],middlecolumns.q[7][3],middlecolumns.q[8][3],middlecolumns.q[9][3],middlecolumns.q[10][3],middlecolumns.q[11][3],middlecolumns.q[12][3],middlecolumns.q[13][3],middlecolumns.q[14][3],middlecolumns.q[15][3]};
    ledmatrix[3] = c{middlecolumns.q[0][2],middlecolumns.q[1][2],middlecolumns.q[2][2],middlecolumns.q[3][2],middlecolumns.q[4][2],middlecolumns.q[5][2],middlecolumns.q[6][2],middlecolumns.q[7][2],middlecolumns.q[8][2],middlecolumns.q[9][2],middlecolumns.q[10][2],middlecolumns.q[11][2],middlecolumns.q[12][2],middlecolumns.q[13][2],middlecolumns.q[14][2],middlecolumns.q[15][2]};
    ledmatrix[4] = c{middlecolumns.q[0][1],middlecolumns.q[1][1],middlecolumns.q[2][1],middlecolumns.q[3][1],middlecolumns.q[4][1],middlecolumns.q[5][1],middlecolumns.q[6][1],middlecolumns.q[7][1],middlecolumns.q[8][1],middlecolumns.q[9][1],middlecolumns.q[10][1],middlecolumns.q[11][1],middlecolumns.q[12][1],middlecolumns.q[13][1],middlecolumns.q[14][1],middlecolumns.q[15][1]};
    ledmatrix[5] = c{middlecolumns.q[0][0],middlecolumns.q[1][0],middlecolumns.q[2][0],middlecolumns.q[3][0],middlecolumns.q[4][0],middlecolumns.q[5][0],middlecolumns.q[6][0],middlecolumns.q[7][0],middlecolumns.q[8][0],middlecolumns.q[9][0],middlecolumns.q[10][0],middlecolumns.q[11][0],middlecolumns.q[12][0],middlecolumns.q[13][0],middlecolumns.q[14][0],middlecolumns.q[15][0]};
    //INITIALISING
    //connecting internal circuitry to default state
    //scorecounter.d = scorecounter.q + clock.q[28]; //score plus one each 4s
    template.d = hff7f;
    firstrow.d = 16h00; 
    middlecolumns.d = 16x{{5b0}};
    lastrow.d = 16h00;
    playerrow.d = 16h00; 
    
    alu.a = 0;
    alu.b = 0;
    alu.alufn = 0;   
    //clock.d = clock.q + 1; // counter increases at each rise in clock edge: period of counter ~ 4
    clock.d = h0; // but we we only run the counter when user is in game mode.
    period.d = clock.q[29];//initialise period = 4sec
    scorecounter.d = scorecounter.q + period.q; //score increases every period

     
    case(gamestate.q){
      
      gamestate.START:
        scorecounter.d = 0;
        firstrow.d = 8hff; //light up first row
        playerrow.d = 8hff; //light up playerrow
        if(button_start){
            gamestate.d = gamestate.PLAYING;      
          }        
      
      gamestate.PLAYING:
        clock.d = clock.q + 1; //clock starts running
        
        //DEFAULT GAMEPLAY SCREEN
        firstrow.d = hefff;
        middlecolumns.d = 16x{{b11111}};
        middlecolumns.d[9][0]=0;
        middlecolumns.d[13][1]=0;
        middlecolumns.d[8][2]=0;
        middlecolumns.d[1][3]=0;
        middlecolumns.d[5][4]=0;
        lastrow.d = hff7f;
        playerrow.d = hff7f;
        
        if(scorecounter.q ==10){
            period.d = clock.q[28];//speed X2
            scorecounter.d = scorecounter.q + 2*(period.q);// score increments by 2
          }
        if(scorecounter.q==30){
            period.d = clock.q[27];//speed X4
            scorecounter.d = scorecounter.q + 4*(period.q);// score increments by 4
          }
        if(scorecounter.q == 70){
            period.d = clock.q[27];// speedX8
            scorecounter.d = scorecounter.q + 8*(period.q);// score increments by 8
          }
        if(button_start){
            gamestate.d = gamestate.START; // reset button pressed
          }
        if(button_L){ // left button pressed
            alu.a = playerrow.q;
            alu.b = 1;
            alu.alufn = 6b100100; //rotate left
            playerrow.d = alu.alu;
          }
        if(button_R){ // right button pressed
            alu.a = playerrow.q;
            alu.b = 1;
            alu.alufn = 6b100101; //rotate right
            playerrow.d = alu.alu;
          }
        if(period.q){ // after each period
            alu.a = playerrow.q;
            alu.b = lastrow.q;
            alu.alufn = 6b010110; // XOR
            correctness.d = alu.alu;
            result.d = &correctness.q;  
            if(~result.q){
              gamestate.d = gamestate.GAMEOVER;
            }
            if(result.q){
                
            //SKYFALLS
              lastrow.d = c{middlecolumns.q[15][4],middlecolumns.q[14][4],middlecolumns.q[13][4],middlecolumns.q[12][4],middlecolumns.q[11][4],middlecolumns.q[10][4],middlecolumns.q[9][4],middlecolumns.q[8][4],middlecolumns.q[7][4],middlecolumns.q[6][4],middlecolumns.q[5][4],middlecolumns.q[4][4],middlecolumns.q[3][4],middlecolumns.q[2][4],middlecolumns.q[1][4],middlecolumns.q[0][4]};
              alu.alufn = 6b100001; //shift right selected on alu
              alu.b = 1;
              case(aluops.q){ //shift right the column registers, first value takes first row
                aluops.SHR15:
                   alu.a = middlecolumns.q[15];
                   middlecolumns.d[15] = alu.alu[4:0];
                   middlecolumns.d[15][4] = firstrow.q[15];
                aluops.SHR14:
                   alu.a = middlecolumns.q[14];
                   middlecolumns.d[14] = alu.alu[4:0];
                   middlecolumns.d[14][4] = firstrow.q[14];
                aluops.SHR13:
                   alu.a = middlecolumns.q[13];
                   middlecolumns.d[13] = alu.alu[4:0];
                   middlecolumns.d[13][4] = firstrow.q[13];
                aluops.SHR12:
                   alu.a = middlecolumns.q[12];
                   middlecolumns.d[12] = alu.alu[4:0];
                   middlecolumns.d[12][4] = firstrow.q[12];
                aluops.SHR11:
                   alu.a = middlecolumns.q[11];
                   middlecolumns.d[11] = alu.alu[4:0];
                   middlecolumns.d[11][4] = firstrow.q[11];
                aluops.SHR10:
                   alu.a = middlecolumns.q[10];
                   middlecolumns.d[10] = alu.alu[4:0];
                   middlecolumns.d[10][4] = firstrow.q[10];
                aluops.SHR9:
                   alu.a = middlecolumns.q[9];
                   middlecolumns.d[9] = alu.alu[4:0];
                   middlecolumns.d[9][4] = firstrow.q[9];
                aluops.SHR8:
                   alu.a = middlecolumns.q[8];
                   middlecolumns.d[8] = alu.alu[4:0];
                   middlecolumns.d[8][4] = firstrow.q[8];
                aluops.SHR7:
                   alu.a = middlecolumns.q[7];
                   middlecolumns.d[7] = alu.alu[4:0];
                   middlecolumns.d[7][4] = firstrow.q[7];
                aluops.SHR6:
                   alu.a = middlecolumns.q[6];
                   middlecolumns.d[6] = alu.alu[4:0];
                   middlecolumns.d[6][4] = firstrow.q[6];
                aluops.SHR5:
                   alu.a = middlecolumns.q[5];
                   middlecolumns.d[5] = alu.alu[4:0];
                   middlecolumns.d[5][4] = firstrow.q[5];
                aluops.SHR4:
                   alu.a = middlecolumns.q[4];
                   middlecolumns.d[4] = alu.alu[4:0];
                   middlecolumns.d[4][4] = firstrow.q[4];
                aluops.SHR3:
                   alu.a = middlecolumns.q[3];
                   middlecolumns.d[3] = alu.alu[4:0];
                   middlecolumns.d[3][4] = firstrow.q[3];
                aluops.SHR2:
                   alu.a = middlecolumns.q[2];
                   middlecolumns.d[2] = alu.alu[4:0];
                   middlecolumns.d[2][4] = firstrow.q[2];
                aluops.SHR1:
                   alu.a = middlecolumns.q[1];
                   middlecolumns.d[1] = alu.alu[4:0];
                   middlecolumns.d[1][4] = firstrow.q[1];
                aluops.SHR0:
                   alu.a = middlecolumns.q[0];
                   middlecolumns.d[0] = alu.alu[4:0];
                   middlecolumns.d[0][4] = firstrow.q[0];
              //randomise template
              firstrow.d = template.q; // new entry to first row
              }
            }                    
          }
        
      gamestate.GAMEOVER:
        clock.d = 0; // stop clock
        // display XX on led matrix
        middlecolumns.d[13] = b10001;
        middlecolumns.d[12] = b01010;
        middlecolumns.d[11] = b00100;
        middlecolumns.d[10] = b01010;
        middlecolumns.d[9]  = b10001;
        middlecolumns.d[6] = b10001;
        middlecolumns.d[5] = b01010;
        middlecolumns.d[4] = b00100;
        middlecolumns.d[3] = b01010;
        middlecolumns.d[2] = b10001;
        
        if (button_start){
            gamestate.d = gamestate.START; // start button pressed -> goes to start screen
          }
      }
  }
}

